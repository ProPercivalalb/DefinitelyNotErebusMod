package erebus.client.model.entity;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.MathHelper;

public class ModelCentipede extends ModelBase
{
  //fields
    ModelRenderer Head1;
    ModelRenderer Head3;
    ModelRenderer BodA1;
    ModelRenderer BodA2;
    ModelRenderer RLA1;
    ModelRenderer RLA2;
    ModelRenderer RLA3;
    ModelRenderer LLA1;
    ModelRenderer LLA2;
    ModelRenderer LLA3;
    ModelRenderer BodB1;
    ModelRenderer BodB2;
    ModelRenderer RLB1;
    ModelRenderer RLB2;
    ModelRenderer RLB3;
    ModelRenderer LLB1;
    ModelRenderer LLB2;
    ModelRenderer LLB3;
    ModelRenderer BodC1;
    ModelRenderer BodC2;
    ModelRenderer RLC1;
    ModelRenderer RLC2;
    ModelRenderer RLC3;
    ModelRenderer LLC1;
    ModelRenderer LLC2;
    ModelRenderer LLC3;
    ModelRenderer BodD1;
    ModelRenderer BodD2;
    ModelRenderer RLD1;
    ModelRenderer RLD2;
    ModelRenderer RLD3;
    ModelRenderer LLD1;
    ModelRenderer LLD2;
    ModelRenderer LLD3;
    ModelRenderer BodE1;
    ModelRenderer BodE2;
    ModelRenderer RLE1;
    ModelRenderer RLE2;
    ModelRenderer RLE3;
    ModelRenderer LLE1;
    ModelRenderer LLE2;
    ModelRenderer LLE3;
    ModelRenderer BodF1;
    ModelRenderer BodF2;
    ModelRenderer RLF1;
    ModelRenderer RLF2;
    ModelRenderer RLF3;
    ModelRenderer LLF1;
    ModelRenderer LLF2;
    ModelRenderer LLF3;
    ModelRenderer RMand1;
    ModelRenderer RMand2;
    ModelRenderer RMand3;
    ModelRenderer LMand1;
    ModelRenderer LMand2;
    ModelRenderer LMand3;
    ModelRenderer RAnt;
    ModelRenderer LAnt;
    ModelRenderer Neck;
  
  public ModelCentipede()
  {
    textureWidth = 64;
    textureHeight = 32;
    
      Head1 = new ModelRenderer(this, 23, 14);
      Head1.addBox(-2.5F, -1.5F, -5F, 5, 3, 5);
      Head1.setRotationPoint(0F, 21F, -3F);
      Head1.setTextureSize(64, 32);
      Head1.mirror = true;
      setRotation(Head1, 0F, 0F, 0F);
      Head3 = new ModelRenderer(this, 26, 9);
      Head3.addBox(-1.5F, -1.5F, -7F, 3, 2, 2);
      Head3.setRotationPoint(0F, 21F, -3F);
      Head3.setTextureSize(64, 32);
      Head3.mirror = true;
      setRotation(Head3, 0F, 0F, 0F);
      BodA1 = new ModelRenderer(this, 0, 7);
      BodA1.addBox(-3F, -0.5F, -3F, 6, 2, 5);
      BodA1.setRotationPoint(0F, 21F, 0F);
      BodA1.setTextureSize(64, 32);
      BodA1.mirror = true;
      setRotation(BodA1, 0F, 0F, 0F);
      BodA2 = new ModelRenderer(this, 0, 15);
      BodA2.addBox(-2F, -1.5F, -1.5F, 4, 1, 3);
      BodA2.setRotationPoint(0F, 21F, 0F);
      BodA2.setTextureSize(64, 32);
      BodA2.mirror = true;
      setRotation(BodA2, 0F, 0F, 0F);
      RLA1 = new ModelRenderer(this, 0, 0);
      RLA1.addBox(0F, -1F, -1F, 3, 2, 2);
      RLA1.setRotationPoint(-3F, 21.5F, 0F);
      RLA1.setTextureSize(64, 32);
      RLA1.mirror = true;
      setRotation(RLA1, 0F, 3.141593F, 0F);
      RLA2 = new ModelRenderer(this, 11, 0);
      RLA2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      RLA2.setRotationPoint(-3F, 21.5F, 0F);
      RLA2.setTextureSize(64, 32);
      RLA2.mirror = true;
      setRotation(RLA2, 0F, 3.141593F, -0.2617994F);
      RLA3 = new ModelRenderer(this, 11, 4);
      RLA3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      RLA3.setRotationPoint(-3F, 21.5F, 0F);
      RLA3.setTextureSize(64, 32);
      RLA3.mirror = true;
      setRotation(RLA3, 0F, 3.141593F, -0.5235988F);
      LLA1 = new ModelRenderer(this, 0, 0);
      LLA1.addBox(0F, -1F, -1F, 3, 2, 2);
      LLA1.setRotationPoint(3F, 21.5F, 0F);
      LLA1.setTextureSize(64, 32);
      LLA1.mirror = true;
      setRotation(LLA1, 0F, 0F, 0F);
      LLA2 = new ModelRenderer(this, 11, 0);
      LLA2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      LLA2.setRotationPoint(3F, 21.5F, 0F);
      LLA2.setTextureSize(64, 32);
      LLA2.mirror = true;
      setRotation(LLA2, 0F, 0F, 0.2617994F);
      LLA3 = new ModelRenderer(this, 11, 4);
      LLA3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      LLA3.setRotationPoint(3F, 21.5F, 0F);
      LLA3.setTextureSize(64, 32);
      LLA3.mirror = true;
      setRotation(LLA3, 0F, 0F, 0.5235988F);
      BodB1 = new ModelRenderer(this, 0, 7);
      BodB1.addBox(-3F, -0.5F, -3F, 6, 2, 5);
      BodB1.setRotationPoint(0F, 21F, 5F);
      BodB1.setTextureSize(64, 32);
      BodB1.mirror = true;
      setRotation(BodB1, 0F, 0F, 0F);
      BodB2 = new ModelRenderer(this, 0, 15);
      BodB2.addBox(-2F, -1.5F, -1.5F, 4, 1, 3);
      BodB2.setRotationPoint(0F, 21F, 5F);
      BodB2.setTextureSize(64, 32);
      BodB2.mirror = true;
      setRotation(BodB2, 0F, 0F, 0F);
      RLB1 = new ModelRenderer(this, 0, 0);
      RLB1.addBox(0F, -1F, -1F, 3, 2, 2);
      RLB1.setRotationPoint(-3F, 21.5F, 5F);
      RLB1.setTextureSize(64, 32);
      RLB1.mirror = true;
      setRotation(RLB1, 0F, 3.141593F, 0F);
      RLB2 = new ModelRenderer(this, 11, 0);
      RLB2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      RLB2.setRotationPoint(-3F, 21.5F, 5F);
      RLB2.setTextureSize(64, 32);
      RLB2.mirror = true;
      setRotation(RLB2, 0F, 3.141593F, -0.2617994F);
      RLB3 = new ModelRenderer(this, 11, 4);
      RLB3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      RLB3.setRotationPoint(-3F, 21.5F, 5F);
      RLB3.setTextureSize(64, 32);
      RLB3.mirror = true;
      setRotation(RLB3, 0F, 3.141593F, -0.5235988F);
      LLB1 = new ModelRenderer(this, 0, 0);
      LLB1.addBox(0F, -1F, -1F, 3, 2, 2);
      LLB1.setRotationPoint(3F, 21.5F, 5F);
      LLB1.setTextureSize(64, 32);
      LLB1.mirror = true;
      setRotation(LLB1, 0F, 0F, 0F);
      LLB2 = new ModelRenderer(this, 11, 0);
      LLB2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      LLB2.setRotationPoint(3F, 21.5F, 5F);
      LLB2.setTextureSize(64, 32);
      LLB2.mirror = true;
      setRotation(LLB2, 0F, 0F, 0.2617994F);
      LLB3 = new ModelRenderer(this, 11, 4);
      LLB3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      LLB3.setRotationPoint(3F, 21.5F, 5F);
      LLB3.setTextureSize(64, 32);
      LLB3.mirror = true;
      setRotation(LLB3, 0F, 0F, 0.5235988F);
      BodC1 = new ModelRenderer(this, 0, 7);
      BodC1.addBox(-3F, -0.5F, -3F, 6, 2, 5);
      BodC1.setRotationPoint(0F, 21F, 10F);
      BodC1.setTextureSize(64, 32);
      BodC1.mirror = true;
      setRotation(BodC1, 0F, 0F, 0F);
      BodC2 = new ModelRenderer(this, 0, 15);
      BodC2.addBox(-2F, -1.5F, -1.5F, 4, 1, 3);
      BodC2.setRotationPoint(0F, 21F, 10F);
      BodC2.setTextureSize(64, 32);
      BodC2.mirror = true;
      setRotation(BodC2, 0F, 0F, 0F);
      RLC1 = new ModelRenderer(this, 0, 0);
      RLC1.addBox(0F, -1F, -1F, 3, 2, 2);
      RLC1.setRotationPoint(-3F, 21.5F, 10F);
      RLC1.setTextureSize(64, 32);
      RLC1.mirror = true;
      setRotation(RLC1, 0F, 3.141593F, 0F);
      RLC2 = new ModelRenderer(this, 11, 0);
      RLC2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      RLC2.setRotationPoint(-3F, 21.5F, 10F);
      RLC2.setTextureSize(64, 32);
      RLC2.mirror = true;
      setRotation(RLC2, 0F, 3.141593F, -0.2617994F);
      RLC3 = new ModelRenderer(this, 11, 4);
      RLC3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      RLC3.setRotationPoint(-3F, 21.5F, 10F);
      RLC3.setTextureSize(64, 32);
      RLC3.mirror = true;
      setRotation(RLC3, 0F, 3.141593F, -0.5235988F);
      LLC1 = new ModelRenderer(this, 0, 0);
      LLC1.addBox(0F, -1F, -1F, 3, 2, 2);
      LLC1.setRotationPoint(3F, 21.5F, 10F);
      LLC1.setTextureSize(64, 32);
      LLC1.mirror = true;
      setRotation(LLC1, 0F, 0F, 0F);
      LLC2 = new ModelRenderer(this, 11, 0);
      LLC2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      LLC2.setRotationPoint(3F, 21.5F, 10F);
      LLC2.setTextureSize(64, 32);
      LLC2.mirror = true;
      setRotation(LLC2, 0F, 0F, 0.2617994F);
      LLC3 = new ModelRenderer(this, 11, 4);
      LLC3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      LLC3.setRotationPoint(3F, 21.5F, 10F);
      LLC3.setTextureSize(64, 32);
      LLC3.mirror = true;
      setRotation(LLC3, 0F, 0F, 0.5235988F);
      BodD1 = new ModelRenderer(this, 0, 7);
      BodD1.addBox(-3F, -0.5F, -3F, 6, 2, 5);
      BodD1.setRotationPoint(0F, 21F, 15F);
      BodD1.setTextureSize(64, 32);
      BodD1.mirror = true;
      setRotation(BodD1, 0F, 0F, 0F);
      BodD2 = new ModelRenderer(this, 0, 15);
      BodD2.addBox(-2F, -1.5F, -1.5F, 4, 1, 3);
      BodD2.setRotationPoint(0F, 21F, 15F);
      BodD2.setTextureSize(64, 32);
      BodD2.mirror = true;
      setRotation(BodD2, 0F, 0F, 0F);
      RLD1 = new ModelRenderer(this, 0, 0);
      RLD1.addBox(0F, -1F, -1F, 3, 2, 2);
      RLD1.setRotationPoint(-3F, 21.5F, 15F);
      RLD1.setTextureSize(64, 32);
      RLD1.mirror = true;
      setRotation(RLD1, 0F, 3.141593F, 0F);
      RLD2 = new ModelRenderer(this, 11, 0);
      RLD2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      RLD2.setRotationPoint(-3F, 21.5F, 15F);
      RLD2.setTextureSize(64, 32);
      RLD2.mirror = true;
      setRotation(RLD2, 0F, 3.141593F, -0.2617994F);
      RLD3 = new ModelRenderer(this, 11, 4);
      RLD3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      RLD3.setRotationPoint(-3F, 21.5F, 15F);
      RLD3.setTextureSize(64, 32);
      RLD3.mirror = true;
      setRotation(RLD3, 0F, 3.141593F, -0.5235988F);
      LLD1 = new ModelRenderer(this, 0, 0);
      LLD1.addBox(0F, -1F, -1F, 3, 2, 2);
      LLD1.setRotationPoint(3F, 21.5F, 15F);
      LLD1.setTextureSize(64, 32);
      LLD1.mirror = true;
      setRotation(LLD1, 0F, 0F, 0F);
      LLD2 = new ModelRenderer(this, 11, 0);
      LLD2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      LLD2.setRotationPoint(3F, 21.5F, 15F);
      LLD2.setTextureSize(64, 32);
      LLD2.mirror = true;
      setRotation(LLD2, 0F, 0F, 0.2617994F);
      LLD3 = new ModelRenderer(this, 11, 4);
      LLD3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      LLD3.setRotationPoint(3F, 21.5F, 15F);
      LLD3.setTextureSize(64, 32);
      LLD3.mirror = true;
      setRotation(LLD3, 0F, 0F, 0.5235988F);
      BodE1 = new ModelRenderer(this, 0, 7);
      BodE1.addBox(-3F, -0.5F, -3F, 6, 2, 5);
      BodE1.setRotationPoint(0F, 21F, 20F);
      BodE1.setTextureSize(64, 32);
      BodE1.mirror = true;
      setRotation(BodE1, 0F, 0F, 0F);
      BodE2 = new ModelRenderer(this, 0, 15);
      BodE2.addBox(-2F, -1.5F, -1.5F, 4, 1, 3);
      BodE2.setRotationPoint(0F, 21F, 20F);
      BodE2.setTextureSize(64, 32);
      BodE2.mirror = true;
      setRotation(BodE2, 0F, 0F, 0F);
      RLE1 = new ModelRenderer(this, 0, 0);
      RLE1.addBox(0F, -1F, -1F, 3, 2, 2);
      RLE1.setRotationPoint(-3F, 21.5F, 20F);
      RLE1.setTextureSize(64, 32);
      RLE1.mirror = true;
      setRotation(RLE1, 0F, 3.141593F, 0F);
      RLE2 = new ModelRenderer(this, 11, 0);
      RLE2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      RLE2.setRotationPoint(-3F, 21.5F, 20F);
      RLE2.setTextureSize(64, 32);
      RLE2.mirror = true;
      setRotation(RLE2, 0F, 3.141593F, -0.2617994F);
      RLE3 = new ModelRenderer(this, 11, 4);
      RLE3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      RLE3.setRotationPoint(-3F, 21.5F, 20F);
      RLE3.setTextureSize(64, 32);
      RLE3.mirror = true;
      setRotation(RLE3, 0F, 3.141593F, -0.5235988F);
      LLE1 = new ModelRenderer(this, 0, 0);
      LLE1.addBox(0F, -1F, -1F, 3, 2, 2);
      LLE1.setRotationPoint(3F, 21.5F, 20F);
      LLE1.setTextureSize(64, 32);
      LLE1.mirror = true;
      setRotation(LLE1, 0F, 0F, 0F);
      LLE2 = new ModelRenderer(this, 11, 0);
      LLE2.addBox(2.6F, -1.7F, -0.5F, 3, 2, 1);
      LLE2.setRotationPoint(3F, 21.5F, 20F);
      LLE2.setTextureSize(64, 32);
      LLE2.mirror = true;
      setRotation(LLE2, 0F, 0F, 0.2617994F);
      LLE3 = new ModelRenderer(this, 11, 4);
      LLE3.addBox(5F, -2.7F, -0.5F, 3, 1, 1);
      LLE3.setRotationPoint(3F, 21.5F, 20F);
      LLE3.setTextureSize(64, 32);
      LLE3.mirror = true;
      setRotation(LLE3, 0F, 0F, 0.5235988F);
      BodF1 = new ModelRenderer(this, 0, 20);
      BodF1.addBox(-2F, -0.5F, -3F, 4, 2, 5);
      BodF1.setRotationPoint(0F, 21F, 25F);
      BodF1.setTextureSize(64, 32);
      BodF1.mirror = true;
      setRotation(BodF1, 0F, 0F, 0F);
      BodF2 = new ModelRenderer(this, 0, 28);
      BodF2.addBox(-1.5F, -1.5F, -1.5F, 3, 1, 3);
      BodF2.setRotationPoint(0F, 21F, 25F);
      BodF2.setTextureSize(64, 32);
      BodF2.mirror = true;
      setRotation(BodF2, 0F, 0F, 0F);
      RLF1 = new ModelRenderer(this, 40, 4);
      RLF1.addBox(0F, -1F, -1F, 3, 2, 2);
      RLF1.setRotationPoint(-1F, 21.5F, 26F);
      RLF1.setTextureSize(64, 32);
      RLF1.mirror = true;
      setRotation(RLF1, 0F, -1.919862F, 0F);
      RLF2 = new ModelRenderer(this, 51, 5);
      RLF2.addBox(3F, -1F, -0.5F, 3, 2, 1);
      RLF2.setRotationPoint(-1F, 21.5F, 26F);
      RLF2.setTextureSize(64, 32);
      RLF2.mirror = true;
      setRotation(RLF2, 0.0F, -1.919862F, 0F);
      RLF3 = new ModelRenderer(this, 11, 4);
      RLF3.addBox(6F, -0.5F, -0.5F, 3, 1, 1);
      RLF3.setRotationPoint(-1F, 21.5F, 26F);
      RLF3.setTextureSize(64, 32);
      RLF3.mirror = true;
      setRotation(RLF3, 0.0F, -1.919862F, 0F);
      LLF1 = new ModelRenderer(this, 40, 4);
      LLF1.addBox(0F, -1F, -1F, 3, 2, 2);
      LLF1.setRotationPoint(1F, 21.5F, 26F);
      LLF1.setTextureSize(64, 32);
      LLF1.mirror = true;
      setRotation(LLF1, 0F, -1.22173F, 0F);
      LLF2 = new ModelRenderer(this, 51, 5);
      LLF2.addBox(3F, -1F, -0.5F, 3, 2, 1);
      LLF2.setRotationPoint(1F, 21.5F, 26F);
      LLF2.setTextureSize(64, 32);
      LLF2.mirror = true;
      setRotation(LLF2, 0F, -1.22173F, 0F);
      LLF3 = new ModelRenderer(this, 11, 4);
      LLF3.addBox(6F, -0.5F, -0.5F, 3, 1, 1);
      LLF3.setRotationPoint(1F, 21.5F, 26F);
      LLF3.setTextureSize(64, 32);
      LLF3.mirror = true;
      setRotation(LLF3, 0F, -1.22173F, 0F);
      RMand1 = new ModelRenderer(this, 56, 0);
      RMand1.addBox(-4.8F, 0.5F, -5.5F, 1, 1, 3);
      RMand1.setRotationPoint(0F, 21F, -3F);
      RMand1.setTextureSize(64, 32);
      RMand1.mirror = true;
      setRotation(RMand1, 0F, -0.1745329F, 0F);
      RMand2 = new ModelRenderer(this, 49, 0);
      RMand2.addBox(-4.3F, 0.5F, -3.5F, 1, 1, 2);
      RMand2.setRotationPoint(0F, 21F, -3F);
      RMand2.setTextureSize(64, 32);
      RMand2.mirror = true;
      setRotation(RMand2, 0F, 0F, 0F);
      RMand3 = new ModelRenderer(this, 40, 0);
      RMand3.addBox(-4F, -0.5F, -2.5F, 2, 2, 2);
      RMand3.setRotationPoint(0F, 21F, -3F);
      RMand3.setTextureSize(64, 32);
      RMand3.mirror = true;
      setRotation(RMand3, 0F, 0.1745329F, 0F);
      LMand1 = new ModelRenderer(this, 56, 0);
      LMand1.addBox(3.8F, 0.5F, -5.5F, 1, 1, 3);
      LMand1.setRotationPoint(0F, 21F, -3F);
      LMand1.setTextureSize(64, 32);
      LMand1.mirror = true;
      setRotation(LMand1, 0F, 0.1745329F, 0F);
      LMand2 = new ModelRenderer(this, 49, 0);
      LMand2.addBox(3.3F, 0.5F, -3.5F, 1, 1, 2);
      LMand2.setRotationPoint(0F, 21F, -3F);
      LMand2.setTextureSize(64, 32);
      LMand2.mirror = true;
      setRotation(LMand2, 0F, 0F, 0F);
      LMand3 = new ModelRenderer(this, 40, 0);
      LMand3.addBox(2F, -0.5F, -2.5F, 2, 2, 2);
      LMand3.setRotationPoint(0F, 21F, -3F);
      LMand3.setTextureSize(64, 32);
      LMand3.mirror = true;
      setRotation(LMand3, 0F, -0.1745329F, 0F);
      RAnt = new ModelRenderer(this, 23, 0);
      RAnt.addBox(-0.2F, -1F, -13.5F, 1, 1, 7);
      RAnt.setRotationPoint(0F, 21F, -3F);
      RAnt.setTextureSize(64, 32);
      RAnt.mirror = true;
      setRotation(RAnt, 0F, 0.1745329F, 0F);
      LAnt = new ModelRenderer(this, 23, 0);
      LAnt.addBox(-0.7F, -1F, -13.5F, 1, 1, 7);
      LAnt.setRotationPoint(0F, 21F, -3F);
      LAnt.setTextureSize(64, 32);
      LAnt.mirror = true;
      setRotation(LAnt, 0F, -0.1745329F, 0F);
      Neck = new ModelRenderer(this, 0, 20);
      Neck.addBox(-1.5F, -0.5F, -2F, 3, 2, 5);
      Neck.setRotationPoint(0F, 21F, -3F);
      Neck.setTextureSize(64, 32);
      Neck.mirror = true;
      setRotation(Neck, 0F, 0F, 0F);
  }

  
  @Override
public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7)
  {
	super.render(par1Entity, par2, par3, par4, par5, par6, par7);
	setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
	 	Head1.render(par7);
	    Head3.render(par7);
	    BodA1.render(par7);
	    BodA2.render(par7);
	    RLA1.render(par7);
	    RLA2.render(par7);
	    RLA3.render(par7);
	    LLA1.render(par7);
	    LLA2.render(par7);
	    LLA3.render(par7);
	    BodB1.render(par7);
	    BodB2.render(par7);
	    RLB1.render(par7);
	    RLB2.render(par7);
	    RLB3.render(par7);
	    LLB1.render(par7);
	    LLB2.render(par7);
	    LLB3.render(par7);
	    BodC1.render(par7);
	    BodC2.render(par7);
	    RLC1.render(par7);
	    RLC2.render(par7);
	    RLC3.render(par7);
	    LLC1.render(par7);
	    LLC2.render(par7);
	    LLC3.render(par7);
	    BodD1.render(par7);
	    BodD2.render(par7);
	    RLD1.render(par7);
	    RLD2.render(par7);
	    RLD3.render(par7);
	    LLD1.render(par7);
	    LLD2.render(par7);
	    LLD3.render(par7);
	    BodE1.render(par7);
	    BodE2.render(par7);
	    RLE1.render(par7);
	    RLE2.render(par7);
	    RLE3.render(par7);
	    LLE1.render(par7);
	    LLE2.render(par7);
	    LLE3.render(par7);
	    BodF1.render(par7);
	    BodF2.render(par7);
	    RLF1.render(par7);
	    RLF2.render(par7);
	    RLF3.render(par7);
	    LLF1.render(par7);
	    LLF2.render(par7);
	    LLF3.render(par7);
	    RMand1.render(par7);
	    RMand2.render(par7);
	    RMand3.render(par7);
	    LMand1.render(par7);
	    LMand2.render(par7);
	    LMand3.render(par7);
	    RAnt.render(par7);
	    LAnt.render(par7);
	    Neck.render(par7);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  @Override
  public void setLivingAnimations(EntityLivingBase par1EntityLiving, float par2, float par3, float par4)
  {
	  	float ba = MathHelper.cos(par2 * 1.0F) * 1.5F * par3;
	  	float bb = MathHelper.cos(par2 + 1.0F * 1.0F) * 2.25F * par3;
	  	float bc = MathHelper.cos(par2 + 2.0F* 1.0F) * 3.F * par3;
	  	float bd = MathHelper.cos(par2 + 3.0F* 1.0F) * 2.5F * par3;
	  	float be = MathHelper.cos(par2 + 4.0F* 1.0F) * 1.5F * par3;
	  	float bf = MathHelper.cos(par2 + 5.0F * 1.0F) * 0.75F * par3;
	  	
	      this.Head1.rotationPointX = bf;
	      this.Head3.rotationPointX = bf;
	      this.RAnt.rotationPointX = bf;
	      this.LAnt.rotationPointX = bf;
	      this.RMand1.rotationPointX = bf;
	      this.RMand2.rotationPointX = bf;
	      this.RMand3.rotationPointX = bf;
	      this.LMand1.rotationPointX = bf;
	      this.LMand2.rotationPointX = bf;
	      this.LMand3.rotationPointX = bf;
	      
	      	this.BodA1.rotationPointX = ba;
	     	this.BodA2.rotationPointX = ba;
	      
	     	this.BodB1.rotationPointX = bb;
	     	this.BodB2.rotationPointX = bb;
	     	
	     	this.BodC1.rotationPointX = bc;
	     	this.BodC2.rotationPointX = bc;
	      
	     	this.BodD1.rotationPointX = bd;
	     	this.BodD2.rotationPointX = bd;
	     	
	     	this.BodE1.rotationPointX = be;
	     	this.BodE2.rotationPointX = be;
	     	
	     	this.BodF1.rotationPointX = bf;
	     	this.BodF2.rotationPointX = bf;   
	     	
	        this.RLA1.rotationPointX = ba - 3.0F;
	        this.RLA2.rotationPointX = ba - 3.0F;
	        this.RLA3.rotationPointX = ba - 3.0F;
	        this.LLA1.rotationPointX = ba + 3.0F;
	        this.LLA2.rotationPointX = ba + 3.0F;
	        this.LLA3.rotationPointX = ba + 3.0F;
	        
	        this.RLB1.rotationPointX = bb - 3.0F;
	        this.RLB2.rotationPointX = bb - 3.0F;
	        this.RLB3.rotationPointX = bb - 3.0F;
	        this.LLB1.rotationPointX = bb + 3.0F;
	        this.LLB2.rotationPointX = bb + 3.0F;
	        this.LLB3.rotationPointX = bb + 3.0F;
	        
	        this.RLC1.rotationPointX = bc - 3.0F;
	        this.RLC2.rotationPointX = bc - 3.0F;
	        this.RLC3.rotationPointX = bc - 3.0F;
	        this.LLC1.rotationPointX = bc + 3.0F;
	        this.LLC2.rotationPointX = bc + 3.0F;
	        this.LLC3.rotationPointX = bc + 3.0F;
	        
	        this.RLD1.rotationPointX = bd - 3.0F;
	        this.RLD2.rotationPointX = bd - 3.0F;
	        this.RLD3.rotationPointX = bd - 3.0F;
	        this.LLD1.rotationPointX = bd + 3.0F;
	        this.LLD2.rotationPointX = bd + 3.0F;
	        this.LLD3.rotationPointX = bd + 3.0F;
	        
	        this.RLE1.rotationPointX = be - 3.0F;
	        this.RLE2.rotationPointX = be - 3.0F;
	        this.RLE3.rotationPointX = be - 3.0F;
	        this.LLE1.rotationPointX = be + 3.0F;
	        this.LLE2.rotationPointX = be + 3.0F;
	        this.LLE3.rotationPointX = be + 3.0F;

	      this.RLA1.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.RLA2.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.RLA3.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.LLA1.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      this.LLA2.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      this.LLA3.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      
	      this.RLA1.rotateAngleZ = MathHelper.cos(par2 * 1.0F) * 0.5F * par3;
	      this.RLA2.rotateAngleZ = MathHelper.cos(par2 * 1.0F) * 0.5F * par3 - 0.2617994F;
	      this.RLA3.rotateAngleZ = MathHelper.cos(par2 * 1.0F) * 0.5F * par3 - 0.5235988F;
	      this.LLA1.rotateAngleZ = MathHelper.cos(par2 * 1.0F) * 0.5F * par3;
	      this.LLA2.rotateAngleZ = MathHelper.cos(par2 * 1.0F) * 0.5F * par3 + 0.2617994F;
	      this.LLA3.rotateAngleZ = MathHelper.cos(par2 * 1.0F) * 0.5F * par3 + 0.5235988F;
	      
	      this.RLB1.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3 + 3.141593F;
	      this.RLB2.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3 + 3.141593F;
	      this.RLB3.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3 + 3.141593F;
	      this.LLB1.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3;
	      this.LLB2.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3;
	      this.LLB3.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3;
	      
	      this.RLB1.rotateAngleZ = MathHelper.cos(par2 +0.5F * 1.0F + (float)Math.PI) * 0.5F * par3;
	      this.RLB2.rotateAngleZ = MathHelper.cos(par2 +0.5F * 1.0F + (float)Math.PI) * 0.5F * par3 - 0.2617994F;
	      this.RLB3.rotateAngleZ = MathHelper.cos(par2 +0.5F * 1.0F + (float)Math.PI) * 0.5F * par3 - 0.5235988F;
	      this.LLB1.rotateAngleZ = MathHelper.cos(par2 +0.5F * 1.0F + (float)Math.PI) * 0.5F * par3;
	      this.LLB2.rotateAngleZ = MathHelper.cos(par2 +0.5F * 1.0F + (float)Math.PI) * 0.5F * par3 + 0.2617994F;
	      this.LLB3.rotateAngleZ = MathHelper.cos(par2 +0.5F * 1.0F + (float)Math.PI) * 0.5F * par3 + 0.5235988F;

	      this.RLC1.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.RLC2.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.RLC3.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.LLC1.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      this.LLC2.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      this.LLC3.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      
	      this.RLC1.rotateAngleZ = MathHelper.cos(par2 +1.0F * 1.0F) * 0.5F * par3;
	      this.RLC2.rotateAngleZ = MathHelper.cos(par2 +1.0F * 1.0F) * 0.5F * par3 - 0.2617994F;
	      this.RLC3.rotateAngleZ = MathHelper.cos(par2 +1.0F * 1.0F) * 0.5F * par3 - 0.5235988F;
	      this.LLC1.rotateAngleZ = MathHelper.cos(par2 +1.0F * 1.0F) * 0.5F * par3;
	      this.LLC2.rotateAngleZ = MathHelper.cos(par2 +1.0F * 1.0F) * 0.5F * par3 + 0.2617994F;
	      this.LLC3.rotateAngleZ = MathHelper.cos(par2 +1.0F * 1.0F) * 0.5F * par3 + 0.5235988F;
	      
	      this.RLD1.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3 + 3.141593F;
	      this.RLD2.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3 + 3.141593F;
	      this.RLD3.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3 + 3.141593F;
	      this.LLD1.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3;
	      this.LLD2.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3;
	      this.LLD3.rotateAngleY = MathHelper.cos(par2 * 1.0F + (float)Math.PI) * 0.3F * par3;
	      
	      this.RLD1.rotateAngleZ = MathHelper.cos(par2 +2.0F * 1.0F + (float)Math.PI) * 0.5F * par3;
	      this.RLD2.rotateAngleZ = MathHelper.cos(par2 +2.0F * 1.0F + (float)Math.PI) * 0.5F * par3 - 0.2617994F;
	      this.RLD3.rotateAngleZ = MathHelper.cos(par2 +2.0F * 1.0F + (float)Math.PI) * 0.5F * par3 - 0.5235988F;
	      this.LLD1.rotateAngleZ = MathHelper.cos(par2 +2.0F * 1.0F + (float)Math.PI) * 0.5F * par3;
	      this.LLD2.rotateAngleZ = MathHelper.cos(par2 +2.0F * 1.0F + (float)Math.PI) * 0.5F * par3 + 0.2617994F;
	      this.LLD3.rotateAngleZ = MathHelper.cos(par2 +2.0F * 1.0F + (float)Math.PI) * 0.5F * par3 + 0.5235988F;
	     
	      this.RLE1.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.RLE2.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.RLE3.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3 + 3.141593F;
	      this.LLE1.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      this.LLE2.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      this.LLE3.rotateAngleY = MathHelper.cos(par2 * 1.0F) * 0.3F * par3;
	      
	      this.RLE1.rotateAngleZ = MathHelper.cos(par2 +3.0F * 1.0F) * 0.5F * par3;
	      this.RLE2.rotateAngleZ = MathHelper.cos(par2 +3.0F * 1.0F) * 0.5F * par3 - 0.2617994F;
	      this.RLE3.rotateAngleZ = MathHelper.cos(par2 +3.0F * 1.0F) * 0.5F * par3 - 0.5235988F;
	      this.LLE1.rotateAngleZ = MathHelper.cos(par2 +3.0F * 1.0F) * 0.5F * par3;
	      this.LLE2.rotateAngleZ = MathHelper.cos(par2 +3.0F * 1.0F) * 0.5F * par3 + 0.2617994F;
	      this.LLE3.rotateAngleZ = MathHelper.cos(par2 +3.0F * 1.0F) * 0.5F * par3 + 0.5235988F;
  }
  
  @Override
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
      this.Head1.rotateAngleY = par4  / (180F / (float)Math.PI);
      this.Head3.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.RAnt.rotateAngleY = par4 / (180F / (float)Math.PI) +0.175F;
      this.LAnt.rotateAngleY = par4 / (180F / (float)Math.PI) -0.175F;
      this.RMand1.rotateAngleY = par4 / (180F / (float)Math.PI) -0.175F;
      this.RMand2.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.RMand3.rotateAngleY = par4 / (180F / (float)Math.PI) +0.175F;
      this.LMand1.rotateAngleY = par4 / (180F / (float)Math.PI) +0.175F;
      this.LMand2.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.LMand3.rotateAngleY = par4 / (180F / (float)Math.PI) -0.175F;
      
      this.Head1.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.Head3.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.RAnt.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.LAnt.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.RMand1.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.RMand2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.RMand3.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.LMand1.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.LMand2.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.LMand3.rotateAngleX = par5 / (180F / (float)Math.PI);
          
      this.RLF1.rotateAngleY = par4  / (180F / (float)Math.PI) -1.919862F;
      this.RLF2.rotateAngleY = par4 / (180F / (float)Math.PI) -1.919862F;
      this.RLF3.rotateAngleY = par4  / (180F / (float)Math.PI) -1.919862F;
      this.LLF1.rotateAngleY = par4  / (180F / (float)Math.PI) -1.22173F;
      this.LLF2.rotateAngleY = par4 / (180F / (float)Math.PI) -1.22173F;
      this.LLF3.rotateAngleY = par4  / (180F / (float)Math.PI) -1.22173F;
  }
  }
